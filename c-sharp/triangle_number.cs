// First triangle number to have over 500 divisors
// No way to brute force this one (and still live with yourself). 


// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle 
// number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

// 1: 1
// 3: 1,3
// 6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28

// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?



class Program
{
    static Dictionary<int, int> trial(int n)
    {
        Dictionary<int, int> exponents = new Dictionary<int, int>();
        int d = 2;
        while (n > 1)
        {
            while (n % d == 0)
            {
                if (exponents.ContainsKey(d))
                {
                    exponents[d] += 1;
                }
                else
                {
                    exponents[d] = 1;
                }
                n /= d;
            }
            d += 1;
        }
        return exponents;
    }

    static int divisors(Dictionary<int, int> exponents)
    {
        int product = 1;
        foreach (KeyValuePair<int, int> kv in exponents)
        {
            product *= (kv.Value + 1);
        }
        return product;
    }

    static int triangle(int n)
    {
        return n * (n + 1) / 2;
    }

    static void Main(string[] args)
    {
        int index = 2;
        int n = triangle(index);
        while (divisors(trial(n)) <= 500)
        {
            ++index;
            n = triangle(index);
        }
        Console.WriteLine("triangle is {0}", n);
    }
}